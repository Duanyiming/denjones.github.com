<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[文章分类: 技术 | 博客-SPRABBIT-超科学兔耳中队]]></title>
  <link href="http://blog.sprabbit.com/blog/categories/technique/atom.xml" rel="self"/>
  <link href="http://blog.sprabbit.com/"/>
  <updated>2013-08-15T21:54:35+08:00</updated>
  <id>http://blog.sprabbit.com/</id>
  <author>
    <name><![CDATA[火雾宗师]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[前端模板的选择]]></title>
    <link href="http://blog.sprabbit.com/blog/2013/08/15/introduction-client-template/"/>
    <updated>2013-08-15T20:01:00+08:00</updated>
    <id>http://blog.sprabbit.com/blog/2013/08/15/introduction-client-template</id>
    <content type="html"><![CDATA[<p>最近接到一个任务，让我选一个前端模板。但是我其实连js模版实战经验都没有，为什么要让我选呢。不过接到任务就得照办了。首先得先知道什么是前端模板呢，稍微查了些百科，简单来说就是利用内嵌于HTML中的一些标记，来直观迅速生成HTML字符串的工具了，类似于后台用PHP标记&lt;?=xxx>来生成HTML这样，而不需要繁琐的字符串拼接操作。需要在前端用javascript来使用，所以叫做前端模板。那么类似后台有多种语言，前端模板也有多种多样，以至于有人在github上做了一个应用方便大家选择前端模板：<a href="http://garann.github.io/template-chooser/">TemplateChooser</a></p>

<!--more-->


<p>虽然其中没有包括所有的模板，但是人们最常用的都在里面了，点开左边的标签设置选项，右面剩下的模板名就是符合要求的了。</p>

<p>第一项 Is this for use on the client or the server，就是模板需要运行在前端还是后台，对于前端模板当然选前台，但是不少模板是可以运行在前后端的。</p>

<p>第二项 How much logic should it have，表明你需要模板中可以包含多少逻辑处理。其中 the entirety of JS 选项代表模板中需要可以运行JS代码；just the basics 则代表模板中仅包含基本的逻辑，比如判断这类的；none at all 则表示模板中不包含任何逻辑，换而言之几乎只能做变量替换的操作。</p>

<p>第三项 Does it need to be one of the very fastest，表示你是否对速度有特别严苛的要求，yes or no。选完yes后会发现只剩三种doT.js、Microtemplating、Underscore templates，这是由一个应用来判定的：<a href="http://jsperf.com/javascript-templating-shootoff-extended">jsPerf</a>。这三种在测试中是排行前三的。但是我们发现里面评测的模板并不完全，所以其实这项并没有太大的参考价值。</p>

<p>第四项 Do you need to pre-compile templates，表示你是否需要可以预编译的模板。首先要解释一下编译的意思，对于一般编程语言，编译就是让代码转换并优化成机器可以识别的机器码，从而机器可以直接运行。这里的编译意思类似，一个模板只是一个直观的数据字符串，我们需要让他变得可执行，那么我们就要让他转变成一个可以执行的函数对象，虽然这个对象一般也是以字符串的形式存在的。是否可以预编译的差别在于，如果你的模板是固定不变的，那么如果预先编译好并将编译结果保存起来，要使用的时候就不需要再动态编译，可以减少你分析模板的时间。</p>

<p>第五项 Do you need compile-time partials，表示你是否需要在编译时的模板拆分。这里的拆分其实并不是准确的表达，但是我找不到一个更好的词来形容了。实际上这个概念很简单，就是模块化的思想，可以将多个模板中重复使用的部分拆分出来单独存成一个模板文件，而让其他需要使用这个部分的模板导入这个模板文件。这种操作一般只在服务端模板中进行，因为在前端难以动态读取后台的分布式拆分文件。但是对于可以预编译的模板，则可以预先将分布式的文件编译好，然后在前台一一导入后使用。</p>

<p>第六项 Do you want a DOM structure, or just a string，那是问你的模板是一个字符串还是一个DOM结构。关于这点我也不太清楚，因为在我的印象中模板就是一个字符串，而里面包含了所渲染的HTML字符串的直观表示。选了DOM之后，同样只剩下三种模板dom.js、pure.js、Transparency。我简单地查看了一下pure.js模板（他同时也是一个不包含逻辑的模板），发现他并不是将一个模板保存为字符串，而是直接在HTML文件中为标签添加一些特殊的类，然后渲染的时候再用选择器出这个DOM对象进行渲染，换而言之他的模板是直接内嵌在HTML文件中的！那么确实如果希望应用逻辑是不大可能的，因为必须保证模板符合XHTML规范。</p>

<p>第七项 Aside from template tags, should it be the same language before and after rendering，这项比较好理解，除了模板标签之外，模板的语法要和模板渲染后的语法一样，那么在这里我们要渲染出HTML语言，结果是显然易见的，就是模板是一种在HTML语言中内嵌标签的语言。或许你会觉得很奇怪，难道还有什么除了插入标签外的神奇的语法吗？选No之后又再一次出现了三种模板dom.js、Jade templates、Microtemplating。我再一次简单的看了下dom.js，因为他同时也是一个使用DOM结构的模板。结果发现DOM是一种完全使用Javascript的模板！他的语法还是非常直观的：</p>

<p>``` javascript
header(</p>

<pre><code>h1('Heading'),
h2('Subheading'));
</code></pre>

<p>nav(</p>

<pre><code>ul({ 'class': 'breadcrumbs' },
  li(a({ href: '/' }, 'Home')),
  li(a({ href: '/section/'}, 'Section')),
  li(a('Subject'))));
</code></pre>

<p>article(</p>

<pre><code>p('Lorem ipsum...'));
</code></pre>

<p>footer('Footer stuff');
```</p>

<p>明白了上面的含义的话，其实还是很好选择的。关于选项中的第二项可能有点争议，到底模板需要多少逻辑呢。如果从模板的出发点来看的话，其实答案是显然易见的。有些人可能觉得功能越强大的模板越好，但是事实恰好相反，人们发明了模板就是为了直观地设计输出数据的表现形式，让显示与逻辑数据分离。此时若为了让模板支持更强大的功能而硬是往里面添加复杂的逻辑，甚至让其支持javascript，是本末倒置的，这些明明可以直接在javascript中操作的东西又何必硬塞到模板里面让其可读性降低呢。然而不包含任何逻辑毕竟不现实，因此大多数模板都提供了最基本的逻辑能力，比如遇到空对象的特殊处理方法。所以这里一般选择just the basics。</p>

<p>最后剩下来的模板也只剩6个，但是到底要如何取舍，还是不能简单的决定。经过一些对比评测[1]，大家普遍认为以下三种是综合评分最高的：Mustache.js、Handlebars.js、dust.js。</p>

<p><a href="https://github.com/janl/mustache.js/">Mustache</a> 应该是最流行的模版了，显示与逻辑分离，模板语法清晰，但是逻辑功能太过缺乏，代码庞大而且效率比较低，已经停止维护超过两年。他的语法如下：
<code>html
{ {#stooges} }
&lt;b&gt;{ {name} }&lt;/b&gt;
{ {/stooges} }
</code></p>

<p><a href="https://github.com/wycats/handlebars.js/">Handlebars</a>
是Mustache的改进，显示与逻辑分离，语法兼容Mustache，可以编译成代码，改进Mustache对路径的支持，但是若需要在服务端运行需要使用服务端Javascript引擎如Node.js。
``` html
{ {#each comments} }</p>

<div class="body">{ {body} }</div>


<p>{ {/each} }
```</p>

<p><a href="https://github.com/linkedin/dustjs">Dust</a>
也是显示与逻辑分离，语法比Mustache更清晰简便（少写一对花括号{}!），可以编译成代码，比Mustache提供更好的路径支持，支持更多的扩展功能，异步渲染，执行效率更高。但是若需要在服务端运行需要使用服务端Javascript引擎如Node.js。
<code>html
{#names}
&lt;li&gt;{name}&lt;/li&gt;{~n}
{/names}
</code></p>

<p>以上三种都是最优秀的模板了，语法可以说是比较类似，但是无论从结果还是过程看Dust都有着无比强大的优势。目前Dust.js是由LinkedIn团队维护的，最近已更新到2.0版本，相比以前有更大的优化，所以我觉得选用dust.js作为模版是比较合适的。只可惜Dust.js毕竟没有胡子Mustache家族势力广泛，尤其在我大天朝，少有见到关于dust的技术文章。下次我打算尽我微薄之力，为大家介绍一下Dust的使用方法，普及一下dust这个LinkedIn推荐的模板。</p>

<p>参考：</p>

<p>[1] <a href="http://engineering.linkedin.com/frontend/client-side-templating-throwdown-mustache-handlebars-dustjs-and-more">The client-side templating throwdown: mustache, handlebars, dust.js, and more</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从游戏服务端到Web前端]]></title>
    <link href="http://blog.sprabbit.com/blog/2013/08/13/game-server-to-front-end/"/>
    <updated>2013-08-13T16:03:00+08:00</updated>
    <id>http://blog.sprabbit.com/blog/2013/08/13/game-server-to-front-end</id>
    <content type="html"><![CDATA[<p>虽然这个标题看起来很厉害，但是其实只是我的一篇随笔，没有很大的技术参考价值，况且我无论哪个方面也没有很高的造诣。这里只是抒发一下我开始工作后的感受，在这个公司提前下班的七夕里。</p>

<p>怀着对游戏的满腔热情，我拿到了一个主营网络游戏的公司的Offer，心想，迎合我的兴趣和特长，我一定能成就一番事业。于是我在几个月前开始了实习，刚开始是一段自学期，因为公司用python作为游戏脚本，而且推荐教材是《Python核心编程》，于是前两周便都在啃那本书。然后是一个考核，决定我们这帮新来的程序猿将进入哪个项目组。我灰常荣幸地进入了公司最赚钱的游戏的服务端，顺便说一下在公司里对程序猿的划分从牛掰到水逼是服务端>客户端>应用软件>移动平台游戏>WEB，当然这只是由公司文化决定的。</p>

<!--more-->


<p>然而我的想象很快就被扑灭了，作为一个服务端的程序员，你要做的只有根据策划提出的要求，写逻辑写逻辑写逻辑。如果这是一个独立游戏，我想最有趣的地方就是写逻辑了吧，然而对于网游来说却并不是这样的。</p>

<p>这是一个已经完全引擎化的东西，基本上公司所有游戏都是用的同一个引擎，服务器引擎基本上只定义了客户端与服务端通信的方法以及数据库存储的抽象化。因此逻辑与显示被完全分离了，显示完全就是客户端做的事情，逻辑完全属于服务端，两者之间只是通过socket来相互传递命令。如果只是这样的话还不错的，逻辑与显示分离一直是很多框架所追求的，然而基本的脚本框架也都基本是从一个游戏拷贝到另一个游戏中的，所以程序员能做的基本上只是往框架里面填东西。明明可以使用更好的设计模式，更好的结构，但是为了让你从一个项目组调到另一个项目组时能很快进入状态，这些都是不允许你去改的。</p>

<p>于是随着功能的添加，局部代码只能越来越臃肿，甚至臃肿到可读性已经基本没有的程度。最后只好不再给你将一些通用的功能添加到父类里，而在子类里特殊地实现，目的只是不再降低通用部分的可读性。他们对“代码即文档”这句话痴迷到近乎疯狂的地步，甚至不允许你多写注释。</p>

<p>那么，所谓的写逻辑，就只能是一些很简单的往框架里填的逻辑，比如某人到某地触发一些什么对白，触发什么战斗，战斗后有什么奖励，收集一些什么物品，或者将这些东西组合起来做成一个任务或者活动。尽管你可以将这些东西写得很面向对象，然而这只是脚本，你写得面向对象并不是因为可扩展性好，而是可读性好，让别人更能读懂你的代码，当然这减少了你的代码量，也是一件好事。底层引擎你是不可能去接触到的，对所有普通员工来说都是闭源的，所以你只要掌握了这个写一般脚本的能力，你可以很轻松，不需要再学什么新技术，也能在这里呆个10年左右，因为技术以及架构都几乎不可能再更新了。作为一门脚本，除了bug的修复，也不需要什么更新。当然，首先你要去读懂那些没有文档，也没有注释的只能祈祷他不再用拼音命名的“即文档”的代码。</p>

<p>尽管在公司里面认为在越能赚钱的项目做越牛掰，而且公司也会将提升的程序员调往更赚钱的项目，而将更有资历的程序员调往新项目，然而一个游戏能否赚钱，实际上跟他的技术甚至程序员没有绝对的联系。因为每个游戏的技术基本是一样的！从引擎到框架，也许只有战斗系统和技能系统有所不同，但是这并不是由程序猿决定的事情，而是策划。换而言之决定一个游戏赚不赚钱是由策划决定的，而你在这样一个最赚钱的项目组里做，你面对的挑战只是更多更多更多的策划需求，而不是运用更好的技术。</p>

<p>很多业内人士都觉得游戏行业不是IT行业，一开始我很鄙视这种说法，凭什么我们运用程序设计的技术来创造虚拟世界就不是IT了呢。然而，我终于体会到，网游这种东西只是刚好用到编程的营销而已，不但技术落后，而且不思进取。我当然可以选择在这里干上十年，到时我也能成为一个富裕的人吧，仅仅是金钱上的，没有业余爱好，没有技术，没有时间，没有妹纸。。。一旦这个行业被淘汰，我必将失业，因为我只会写一定逻辑范围内的脚本，而这种技能除了在本公司之外几乎没有用武之地。</p>

<p>然而实习期间，我也没啥怨念的，仅仅是用来长经验的，越来越多同期的实习生被往下调到其他项目、客户端、还有WEB。最后我成为了基本被组长认同的实习生之一。但是正式入职第二天我想到我的将来，提出了转职，转往网站部从事网站开发。这当然是个令组长甚至主管都震惊的决定，没有资格留下来的人被调往网站部，而一个及格个人却主动申请调往网站部。他们甚至因此而添加了一条入职未满一年的人禁止提出转职的规定。他们用来挽留我的理由除了钱、还是钱，但是我知道有很多东西是无法用钱来衡量的。我花了九牛二虎之力东拉西扯两天后终于让他们让我转职了。</p>

<p>衡量之后，我发现做网站是比较符合我的情况，而且可以直接接触到最新的技术。比起后端也是基本逻辑加数据操作，我还是觉得比较有设计感的前端更适合我这个游戏制作人，于是我选择了做前端JS。我觉得这个职位还是比较多元化的，虽然只写JS，但是涉及的方面也可以很广泛，从页面逻辑，到页面特效，从前端JS到后台也可以用JS（Node），从PC到移动端，从数据交换到数据渲染，从页面功能到用户体验，JS能做到的东西比我想象中要多很多。可惜JS程序员在公司的地位没有得到重视，专注于前端的程序员不多，也没有统一规范，不过好消息是公司将越来越重视这一方面，将前端JS从后台人员自己编写中分离出来，我转职后不久便要我起草一份Javascript编程规范，包括命名、语法、文档注释、面向对象、前端模板等的规范。所以我还是觉得能转到前端还是挺不错的。</p>

<p>最重要的一点是，我有了自己的时间，有了外网机！在服务端为了防止泄密，是没有外网机的，用一台内网机你甚至见不到机箱，所以除了工作之外，你在公司几乎干不了别的事情，技术不会更新，只要懂了基本语法，基本不需要到网上查资料，加班即使没事干，也只能玩自己的游戏项目。为了坚持我的同人创作，我觉得外网机是基本的条件。</p>

<p>以后可能会陆续发些关于前端的文章吧，虽然以前我也没发过什么技术文章，主要是技术太烂拿不出手，今后就以学习交流的态度来写些东西吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于SpeShow]]></title>
    <link href="http://blog.sprabbit.com/blog/2013/01/17/about-speshow/"/>
    <updated>2013-01-17T15:07:00+08:00</updated>
    <id>http://blog.sprabbit.com/blog/2013/01/17/about-speshow</id>
    <content type="html"><![CDATA[<p><a href="http://www.sprabbit.com/spengine/speshow.html">SpeShow(SPENGINE)的链接</a>早就加在了<a href="http://www.sprabbit.com">SPRABBIT首页</a>的导航栏上，不过可能不是很起眼，所以没什么人知道。</p>

<p>虽然SpeShow发布已经有一段时间了，但是感觉还是在博客里记录一下比较好。SpeShow是主要由我编写的一个图文脚本演示程序，最初的目的是用来做Galgame，但是希望做的更通用点，所以就扩展为图文脚本演示，不过称之为Galgame引擎也不为过。相关的信息可以查看<a href="http://www.sprabbit.com/spengine/speshow.html">SpeShow(SPENGINE)的主页</a>，里面包括有介绍，教程，演示视频，程序下载等内容。</p>

<p>不过实际上这个引擎的完善度还有所欠缺，我又面临毕业就业，可能完善这个引擎将是一个很漫长的过程。但是此前我将会全力让他能制作出完整的Galgame，毕竟我就是为了制作新的Galgame才开发的这个引擎啊。首个SpeShow游戏将会是我们的下一作<a href="http://www.sprabbit.com/sicily/">Sicily-零与一的幻想</a>，目前正在紧密制作中呢，敬请期待啦。</p>

<p>无论如何，加油！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在新Windows系统中重新部署Octopress]]></title>
    <link href="http://blog.sprabbit.com/blog/2012/12/21/recover-octopress/"/>
    <updated>2012-12-21T19:10:00+08:00</updated>
    <id>http://blog.sprabbit.com/blog/2012/12/21/recover-octopress</id>
    <content type="html"><![CDATA[<p>最近重装Win7 x64后直接在线升级到了Win8 x64，很多东西都要重新部署，包括octopress环境。这里记录一下关键的步骤，以便日后参考。</p>

<p>这个Memo将从安装git开始记录，前提是已经在别的电脑上往github部署好了Octopress。</p>

<!--more-->




<h2>第一步：部署Git</h2>


<p>参考过程：<a href="https://help.github.com/articles/set-up-git">Git hub官网</a></p>

<h4><a href="http://git-scm.com/downloads">下载并安装最新版Git</a></h4>


<p>（可能需要翻墙，也可以自行搜索下载）</p>

<h4>设置用户名</h4>


<p><code>
git config --global user.name "Your Name Here"
</code></p>

<h4>设置邮箱</h4>


<p><code>
git config --global user.email "your_email@youremail.com"
</code></p>

<h4>设置密码缓存（3600秒）</h4>


<p><code>
git config --global credential.helper 'cache --timeout=3600'
</code></p>

<h4>生成SSH key</h4>


<p><code>
ssh-keygen -C 'your_email@youremail.com' -t rsa
</code></p>

<h4>拷贝Key</h4>


<p>到<code>C:/Users/用户名/ssh</code>打开并拷贝<code>id_rsa.pub</code>的内容。</p>

<h4>注册SSH Key</h4>


<p>到github页面点右上角的Account Setting，然后点左边的SSH Keys，再点右边的Add SSH key，然后把拷贝的内容粘贴到空白处点Add Key即可。</p>

<h2>第二步：部署Octopress执行环境</h2>


<p>参考过程：<a href="http://sinosmond.github.com/blog/2012/03/12/install-and-deploy-octopress-to-github-on-windows7-from-scratch/">Sinosmond的一篇文章</a></p>

<h4>安装Ruby</h4>


<p>到 <a href="http://rubyforge.org/frs/?group_id=167">RailsInstaller</a> 查找下载最新版本（当前为1.9.3）。安装完后将安装目录下的bin文件夹添加到系统变量<code>PATH</code>中</p>

<h4>安装DevKit</h4>


<p>下载<a href="https://github.com/downloads/oneclick/rubyinstaller/DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe">RubyInstaller DevKit</a>并解压。在解压目录中用命令行执行：
<code>
ruby dk.rb init
ruby dk.rb install
</code></p>

<h4>安装Python</h4>


<p>下载并安装<a href="http://www.activestate.com/activepython/downloads">ActivePython-2.7 的 x86版本</a>（即使是64位系统也尽量使用本版，其他版本兼容性未知）。
在命令行中执行
<code>
easy_install pygments
</code></p>

<h4>设置语言环境变量</h4>


<p>设置 <code>LANG</code> 和 <code>LC_ALL</code> 两个环境变量，其值均设置为 <code>zh_CN.UTF-8</code></p>

<p>启动git bash，执行
<code>
echo "export LANG LC_ALL" &gt; ~/.bash_profile
echo "alias ll='ls -l --color=tty'" &gt;&gt; ~/.bash_profile
echo "alias ls='ls --color=tty'" &gt;&gt; ~/.bash_profile
</code></p>

<h4>配置Ruby</h4>


<p>在git bash中执行一下命令配置更新源
<code>
gem sources --remove http://rubygems.org/
gem sources -a http://ruby.taobao.org/
</code></p>

<p>在git bash中执行一下命令安装rdoc和bundler
<code>
gem install rdoc bundler
</code></p>

<h2>第三步：clone Octopress 分支</h2>




<h4>clone source 分支</h4>


<p>在git bash中进入到需要存放本地分支的目录，然后执行
<code>
git clone -b source username:username.github.com.git username.github.com
</code>
以便将“source”分支clone到username.github.com文件夹下。其中以上所有“username”改为真正的用户名。</p>

<p>如果出现错误尝试使用
<code>
git clone -b source git@github.com:username/username.github.com username.github.com
</code></p>

<h4>clone master 分支</h4>


<p>在git bash中继续执行
<code>
cd username.github.com #进入到source分支目录
git clone -b master username:username.github.com.git _deploy
</code>
以便将“master”分支clone到username.github.com文件夹下的_deploy文件夹。其中以上所有“username”改为真正的用户名。
如果出现错误尝试使用
<code>
git clone -b master git@github.com:username/username.github.com username.github.com
</code></p>

<h4>完成部署</h4>


<p>至此，Octopress重新部署完毕，可以继续写博客咯。太久没动过这个博客了，差点就忘了怎么写博客了，如果有哪里有问题忘提醒。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于在64位 Windows 7 中部署中文化的Octopress]]></title>
    <link href="http://blog.sprabbit.com/blog/2012/03/23/octopress/"/>
    <updated>2012-03-23T15:52:00+08:00</updated>
    <id>http://blog.sprabbit.com/blog/2012/03/23/octopress</id>
    <content type="html"><![CDATA[<blockquote>
前言——可以在Linux环境下部署的话，还是尽可能在Linux下部署吧...
</blockquote>


<p>真的不是开玩笑的，除非你像我一样喜欢折腾。即使没有Linux系统，能够运行虚拟机的话，装个虚拟的Linux系统也比直接在Windows中部署要简单。</p>

<p>一般的安装步骤，在<a href="http://octopress.org/docs/">Octopress的文檔</a>中就有详细的说明。而在Windows 7中部署，则可参考<a href="http://sinosmond.github.com/blog/2012/03/12/install-and-deploy-octopress-to-github-on-windows7-from-scratch/">Sinosmond的一篇文章</a>。
具体的部署过程，我就不再重复了，只是在部署过程中有几点是需要注意的。</p>

<!--more-->




<h2>Ruby</h2>


<p>Octopress要求的Ruby的版本是1.9.2，最好使用该版本，因为不同版本间的函数库有可能有出入，导致某些插件无法运行。这里经过我的折腾，发现最新版1.9.3也是支持的，目前使用起来没有什么问题，但是需要将octopress根目录下的“.rvmrc”文件中的一行改成
<code>
rvm use 1.9.3
</code></p>

<h2>分支</h2>


<p>若要使用github的个人page，建立repo时设置的名字必须是<code>&lt;yourname&gt;.github.com</code>，这里<code>&lt;yourname&gt;</code>指的是你的github用户名。这样就可以让你的页面可以通过地址<code>http://&lt;yourname&gt;.github.com</code>，来访问，如果不是这样命名的话，你的github pages只能通过<code>github.com/&lt;reponame&gt;</code>访问。
使用<code>rake setup_github_pages</code>后，需要输入github pages的repo地址，格式是<code>git@github.com:&lt;yourname&gt;/&lt;yourname&gt;.github.com.git</code>。</p>

<p>使用<code>rake deploy</code>后，会将public活页夹下的所有文件拷贝到分支管理目录_deploy活页夹中，也即是<code>&lt;yourname&gt;.github.com</code>的master分支目录，然后上传到github。如需对源代码进行版本管理，需要另外建立source分支，并使用基本的git命令进行版本管理。</p>

<h2>中文化</h2>


<p>Octopress原本就是一个英文的框架，所以并没有考虑很多使用其他语言会导致的问题。在尝试中文化时，可能会遇到一些问题，还好这些问题都是能解决的。</p>

<h4>rake generate失败</h4>


<p>如果直接使用原框架书写中文博文，会在generate时失败，提示出现非法UTF-8字符。首先要确认是否已经按照<a href="http://sinosmond.github.com/blog/2012/03/12/install-and-deploy-octopress-to-github-on-windows7-from-scratch/">Sinosmond的文章</a>配置，并设置好<code>LANG</code>等环境变量。如果仍出现该提示是因为原本的文件和生成的文件都是ASCII编码的，如果直接输入中文当然不能被识别。正确的做法是，若要在文件中书写中文，首先将文件保存为<code>UTF-8 without BOM</code>编码格式，然后再进行书写。注意是<code>UTF-8 without BOM</code>而不是单纯的<code>UTF-8</code>编码，如果存成后者，在generate时不会出错，但是生成页面时会出现奇怪的现象。</p>

<h4>中文化文章分类</h4>


<p>如果直接使用中文的文章分类，在deploy后会发现，点击文章分类后出现404错误。这是因为在在generate时，<code>category_generator.rb</code>插件将根据分类名称生成分类页面活页夹，而生成的活页夹是中文的，这在URL中是不允许的，因此无法定位到该页面。这里有<a href="http://geron.heroku.com/blog/2012/octo-cate-cn-spo">Geron的一篇文章</a>，介绍如何为octopress提供中文分类支持。但是我使用该方法后，并没有成功应用。他提供的方法是直接将中文的文章分类转换为url中的编码(就是那种类似<code>%3d</code>这样代表文字的编码)。我使用后，确实令中文的活页夹变成了URL编码的活页夹，这样URL就跟目录相一致。我在本地也测试成功，但是上传github后依然出现404错误，并且考虑到这种方法会产生意义不明显的URL，所以只好采用别的方法。这里我想到了一个将分类名称跟索引分离的方法。即是在一个分类变量中，同时储存一个要显示的名称，还有一个要生成的路径名，这一串字符作为分类索引，并令显示与实现分离。</p>

<p><a href="https://github.com/denjones/denjones.github.com/commit/1d4f3b9433a4d77e31530c4d5f20611c9b9829e2#diff-1">这里是我对<code>category_generator.rb</code>的修改</a>。</p>

<p>修改后的分类格式变更为<code>&lt;分类显示名称&gt;{&lt;分类目录名称&gt;}</code>。比如说你想建立一个“随笔”分类，你想让分类页面保存在一个叫“essay”的目录中，你就要在文章markdown文件的头部加入这样的一行：
<code>
categories:  随笔{essay}
</code>
如果希望归类到多个分类，则需要这样写：
<code>
categories:
 - 随笔{essay}
 - Octopress{octopress}
</code></p>

<p>除此之外，还要对一些用于显示分类名称的页面做一些修改。把其中的<code>category</code>修改为<code>category[/[ ^ { ]*/]</code>，因为这里的<code>category</code>已经变成了<code>&lt;分类显示名称&gt;{&lt;分类目录名称&gt;}</code>的格式，需要使用正则表达式取出<code>&lt;分类显示名称&gt;</code>这一部份用于显示。</p>

<p>我的octopress框架已经对相关部份做了处理，是一个比较完善的中文版本的Octopress，如果不喜欢折腾的可以直接在Github <a href="https://github.com/denjones/denjones.github.com/tree/source">clone本博客的框架的开源代码</a>，然后再把其中的<code>_post</code>等目录中的多余文件去掉，修改为自己的框架进行使用。</p>

<h2>代码高亮</h2>


<p>其实这个问题才是在64位Windows 7中部署Octopress会遇到的难题。Octopress已经自带了代码高亮(Highlighting)的相关插件，使用的是<a href="http://pygments.org/">pygments</a>这款插件。但是这款插件是用Python语言写的，所以在本地运行时，需要有安装Python环境。因此进入<a href="http://www.activestate.com/activepython/downloads">Python的主页</a>下载安装包进行安装。好了，既然是64位的Windows7系统，那么首选当然是ActivePython的64-bit版本。兴高采烈的下载安装后，发现问题来了，如果设置了代码高亮的<code>lang</code>属性，generate时会出现错误<code>Liquid error: Could not open library ‘.dll’: The specified module could not be found.</code>。查看错误消息发现在执行<code>rubypython.rb</code>中的函数时，产生了错误。Google后得知rubypython对Windows支持不好，因此需要手动修改其中的一些代码。</p>

<p>对ruby目录下的<code>lib\ruby\gems\ruby 1.9.x>\gems\rubypython-0.5.x\lib\rubypython\pythonexec.rb</code><a href="https://github.com/bendoerr/rubypython/commit/1349aea1c6faa459c4be8474e4a7e878f08459c2">作此修改</a>。</p>

<p>一般来说这样就可以解决问题，但是在这里这个错误<code>Liquid error: Could not open library ‘.dll’: The specified module could not be found.</code>依然出现。考虑是不是64位的问题，于是进入<code>C:/windows/sysWOW64</code>下，并没有发现Python的相关dll，于是到<code>C:/windows/system32</code>下，将<code>python27.dll pythoncom27.dll pywintypes27.dll</code>拷贝到<code>C:/windows/sysWOW64</code>下。generate发现错误变成<code>Liquid error: Could not open library ‘C:/windows/system32/python27.dll’: The specified module could not be found.</code>。然后我就开始百思不得其解。最后没有办法，尝试安装了ActivePython的32-bit版本，问题迎刃而解。估计是rubypython对64位的python环境支持不好，无法打开64位Python的dll。所以在选择ActivePython版本时，请使用32-bit版本。</p>

<h2>结语</h2>


<p>至此，中文版的Octopress在64位windows7中部署成功。折腾了那么久，总算有所回报。但是想到要在别的Windows机器上写博客，也要经过如此复杂的环境配置，我就觉得蛋疼。还好中文框架源码已经使用了版本管理，并不需要对框架进行重复的修改。总的来说在Linux下部署Octopress要比在Windows中简单得多，若经不起折腾，还是不由选用Windows + Octopress这种组合。但是既然你选用了Octopress，证明你的折腾能力还是有的，因为Octopress是一款面向Hacker的博客框架，就在使用Octopress的过程中，享受折腾带来的乐趣吧。</p>
]]></content>
  </entry>
  
</feed>
