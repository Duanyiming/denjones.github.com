<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[文章分类: Javascript | 博客 SPRABBIT 超科学兔耳中队]]></title>
  <link href="http://blog.sprabbit.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://blog.sprabbit.com/"/>
  <updated>2013-08-17T19:23:33+08:00</updated>
  <id>http://blog.sprabbit.com/</id>
  <author>
    <name><![CDATA[火雾宗师]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dust.js语法简介（二）]]></title>
    <link href="http://blog.sprabbit.com/blog/2013/08/17/introduction-dustjs-2/"/>
    <updated>2013-08-17T16:26:00+08:00</updated>
    <id>http://blog.sprabbit.com/blog/2013/08/17/introduction-dustjs-2</id>
    <content type="html"><![CDATA[<p>从这篇文章开始我将介绍Dust的语法，其实内容基本上和Dust的<a href="https://github.com/linkedin/dustjs/wiki/Dust-Tutorial">Tutorial</a>差不多，可能还要简化一点。</p>

<!--more-->


<h2>Dust在线测试器</h2>

<p>首先要介绍一下Dust项目中的一个<a href="http://linkedin.github.io/dustjs/test/test.html">在线测试器</a>，在了解Dust语法的同时，在这个测试器上尝试应用学到的语法，既可以验证语法是否正确，也可以加强对语法的记忆。进入测试器后可以见到四个框，从左上、左下、右上、右下分别编号为1、2、3、4。测试时在1号框中填入一个Dust模板，然后2号框将显示该模板编译后的结果，再在3号框填入一个JSON对象，4号框中将显示最终的渲染结果。</p>

<h2>标签（Tag）</h2>

<p>Dust模板以一种嵌入到HTML中的标签的形式存在。Dust标签使用一对花括号包裹，类似于HTML标签使用一对尖括号包裹：</p>

<p><code>html
{name}
</code></p>

<h2>注释</h2>

<p>以下标签将不会产生任何内容，即可用作注释（感叹后之间）：</p>

<p><code>html
{! Comment syntax !}
</code></p>

<h2>键（Key）</h2>

<p>一般Dust标签的表示只有两种形式，一种是键，另一种是区段。键是一个最简单的Dust标签，其中包含的花括号中的值称之为键，对应于JSON对象的属性名，对应的属性值一般为简单类型，比如字符串，渲染后将直接以属性值代替整个标签。如果搜索不到任何匹配值，则不会返回任何数据。</p>

<p><code>html
{name}
</code></p>

<p>在键名后面可以跟随过滤器，使用竖线分隔，一般用于选择处理“&lt;”，“>”等特殊符号的转义：</p>

<pre><code>{name|s} 禁用自动转码
{name|h} 强制使用HTML转码
{name|j} 强制使用Javascript转码
{name|u} 使用encodeURI编码
{name|uc} 使用encodeURIComponent编码
{name|js} 将JSON对象转换为字符串
{name|jp} 将JSON 字符串转换为JSON对象
</code></pre>

<p>过滤器也可以进行组合：</p>

<pre><code>{name|jp|h}
</code></pre>

<p>一些特殊字符也可以键的形式直接取值输出：</p>

<pre><code>{~n}    换行
{~r}    CR换行
{~lb}   左花括号
{~rb}   右花括号
{~s}    空格
</code></pre>

<h2>区段（Section）</h2>

<p>以下两个标签及其包裹的部分称之为区段，用于循环显示数据。其中“#”为开始标签，“/”为结束标签，其后的键值同样对应于JSON对象的属性名，对应的属性值一般为数组或单个对象，单个对象将被当做一个只有一个元素的数组来对待。模板会按下标对数组中的每个元素调用一次区段包裹着的模板。上一篇中的例子就是利用了区段来循环输出列表元素。</p>

<p><code>html
{#names}....{/names}
</code></p>

<p>在区段中可以使用两个特殊的键：</p>

<pre><code>{$idx}  表示当前迭代的序号（从0开始）
{$len}  表示数组长度
</code></pre>

<h2>上下文（Context）</h2>

<p>Dust对键或区段值的查询与javascript中对作用域链中变量值的查询类似，换而言之使用区段时会临时改变当前的上下文。</p>

<p>例如一个嵌套的JSON对象：</p>

<p>``` javascript
{</p>

<pre><code>"name": "root",
"anotherName": "root2",
"A":{
    "name":"Albert",
    "B":{
        "name":"Bob"
    }
}
</code></pre>

<p>}
```</p>

<p>使用区段索值：</p>

<p><code>html
{#A}{name}{/A}
</code></p>

<p>则会得到这个对象的<code>A.name</code>的值：</p>

<p><code>html
Albert
</code></p>

<p>因为使用区段时将上下文转移到A属性对应的对象中。</p>

<p>而使用以下区段索值：</p>

<p><code>html
{#A}{anotherName}{/A}
</code></p>

<p>因为在对象A的属性中不存在“anotherName”属性，于是Dust会向上查询A所处的上下文，发现存在“anotherName”属性，于是得到：</p>

<p><code>
root2
</code></p>

<p>若往上查找到JSON对象根部间的所有的上下文均无对应属性时将返回空白，索值不会向下查找。</p>

<h2>路径（Path）</h2>

<p>若使用不带路径的区段索值，那么相当于从JSON对象的根部开始定位区段上下文。而使用路径可以指定开始搜索的位置。路径使用标志“.”来标记标签，跟javascript语法类似。依然是这个JSON对象：</p>

<p>``` javascript
{</p>

<pre><code>"name": "root",
"anotherName": "root2",
"A":{
    "name":"Albert",
    "B":{
        "name":"Bob"
    }
}
</code></pre>

<p>}
```</p>

<p>若我们需要取A属性下的B属性的name则可以表达成这样：</p>

<p><code>html
{A.B.name}
</code></p>

<p>或者使用路径标记区块：</p>

<p><code>html
{#A.B}{name}{/A.B}
</code></p>

<p>或者使用单个“.”表示当前上下文对象（当前为字符串）：</p>

<p><code>html
{#A.B.name}{.}{/A.B.name}
</code></p>

<p>规定路径后，首先在指定的上下文进行查找name的值，找不到时不会向上追溯，而是从根部开始查找。</p>

<p><code>html
{#A.B}{A.name}{/A.B}
</code></p>

<p>上面这个模板将会在A.B中搜索A，因为B并无A属性，所以从JSON对象根部开始找到A属性，从而找到A.name，返回“Albert”，若从根部也无法找到，则返回空白。</p>

<h2>修改上下文</h2>

<p>我们也可以在一定程度上修改上下文的关系。通过使用冒号“:”可以用冒号后面的键值代替前面的键值的父级上下文：</p>

<p><code>html
{#A:A2} ... {/A}
</code></p>

<p>以上这个区段会屏蔽掉A的父级上下文，临时将A2作为A的父级上下文，即在A中找不到目标时不会往上回溯，而去搜索A2下的属性。</p>

<h2>区段参数</h2>

<p>在区段中可以设置参数：</p>

<p>``` javascript
{#A.B foo="Hi" bar=" Good to see you"}</p>

<pre><code>{foo} {name} {bar}
</code></pre>

<p>{/A.B}
```</p>

<p>模板会将参数值替代键值标签，结果为：</p>

<p><code>html
Hi Bob Good to see you
</code></p>

<p>参数也可以是键名，但是赋值时的上下文在区段之外：</p>

<p>``` javascript
{#A.B foo=A.name bar=anotherName}</p>

<pre><code>{foo} {name} {bar}
</code></pre>

<p>{/A.B}
```</p>

<h2></h2>

<p>至此，我们已经可以简单地将模板付诸应用了。下一节将介绍一些逻辑相关的语法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dust.js语法简介（一）]]></title>
    <link href="http://blog.sprabbit.com/blog/2013/08/16/introduction-dustjs-1/"/>
    <updated>2013-08-16T09:44:00+08:00</updated>
    <id>http://blog.sprabbit.com/blog/2013/08/16/introduction-dustjs-1</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/08/15/introduction-client-template/">经过一轮挣扎</a>，我作出了与LinkedIn一样的选择，使用Dust.js作为模板，但是因为Dust.js缺少中文文档，导致在国内的普及率比较低。于是我决定在这里对Dust的语法进行一些必要的介绍。</p>

<!--more-->


<h2>为什么要用前端模板？</h2>

<p>在静态页面中，包括已经从后台生成的HTML中，一般很少需要应用到模板，但是随着AJAX技术的发展，不刷新页面而动态更新内容的需求越来越高。为了降低通讯成本，这种通讯技术传输的一般是一个JSON对象，而不是一整串HTML字符串，所以在前端接受JSON数据之后，还要经过处理才能按要求显示在浏览器上。若只是用纯javascript进行拼接处理，将是一个比较繁琐的过程，而且写出来的代码不直观，可读性比较低。比如如果一个JSON对象<code>people</code>是下面这样的：</p>

<p>``` javascript
{</p>

<pre><code>"title": "Famous People", 
"names": [{ "name": "Larry" }, { "name": "Curly" }, { "name": "Moe" }]
</code></pre>

<p>}
```</p>

<p>我们要把他渲染成一个HTML列表如下：</p>

<p>``` html
Famous People</p>

<ul>
　　<li>Larry</li>
　　<li>Curly</li>
　　<li>Moe</li>
</ul>


<p>```</p>

<p>使用纯粹的javascript将是这样的：</p>

<p>``` javascript
var result = people.title + '\n';
result += '<ul>' + '\n';
for (var i = 0; i &lt; people.names.length; i++) {</p>

<pre><code>result += '&lt;li&gt;' + people.names[i].name + '&lt;/li&gt;' + '\n';
</code></pre>

<p>}
result += '</ul>'
```</p>

<p>当然了这只是一个比较简单的例子，而且代码具有专用性且不是最简形式，但是为了兼顾可读性和简介性这样写是比较好的。而使用dust模板将只需要一个模板：</p>

<p>``` html
{title}</p>

<ul>
{#names}
　　<li>{name}</li>{~n}
{/names}
</ul>


<p>```</p>

<p>然后将<code>people</code>传给编译好的模板则可生成所需要的结果，非常直观。</p>

<h2>什么是Dust.js？</h2>

<p>Dustjs、dust.js或者直接叫Dust，是一种模板，一开始是由<a href="https://github.com/akdubya">Aleksander</a> 编写并于2010发布第一个版本<a href="https://github.com/akdubya/dustjs">于Github</a>。因为后台编译使用 Node.js 所以延续了在插件名后加.js的传统。Aleksander 很喜欢胡子模板 Mustache 的语法。但是Mustache缺少了Aleksander想要的特性，比如模板块和高性能。</p>

<p>从<a href="http://akdubya.github.io/dustjs/">dust.js的导引页面</a>看来，这个模板制作者还是很有诚意的。可惜这个项目已于两年前停止更新，版本停留在0.3.0。好消息是大型职业社交网<a href="http://www.linkedin.com">LinkedIn</a>也了解到了这个模板的优点和潜力，并接手了Dust.js的后续开发，最终出来的就是现在的<a href="http://linkedin.github.io/dustjs/">Dust.js(LinkedIn)</a>，为了简便起见后面继续称之为Dust。经过不断地更新，Dust目前已经到了2.0版本了。</p>

<h2></h2>

<p>由于时间关系，我还是决定将真正的语法介绍留到下一篇文章了，敬请期待。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前端模板的选择]]></title>
    <link href="http://blog.sprabbit.com/blog/2013/08/15/introduction-client-template/"/>
    <updated>2013-08-15T20:01:00+08:00</updated>
    <id>http://blog.sprabbit.com/blog/2013/08/15/introduction-client-template</id>
    <content type="html"><![CDATA[<p>最近接到一个任务，让我选一个前端模板。但是我其实连js模版实战经验都没有，为什么要让我选呢。不过接到任务就得照办了。首先得先知道什么是前端模板呢，稍微查了些百科，简单来说就是利用内嵌于HTML中的一些标记，来直观迅速生成HTML字符串的工具了，类似于后台用PHP标记&lt;?=xxx>来生成HTML这样，而不需要繁琐的字符串拼接操作。需要在前端用javascript来使用，所以叫做前端模板。那么类似后台有多种语言，前端模板也有多种多样，以至于有人在github上做了一个应用方便大家选择前端模板：<a href="http://garann.github.io/template-chooser/">TemplateChooser</a></p>

<!--more-->


<p>虽然其中没有包括所有的模板，但是人们最常用的都在里面了，点开左边的标签设置选项，右面剩下的模板名就是符合要求的了。</p>

<p>第一项 Is this for use on the client or the server，就是模板需要运行在前端还是后台，对于前端模板当然选前台，但是不少模板是可以运行在前后端的。</p>

<p>第二项 How much logic should it have，表明你需要模板中可以包含多少逻辑处理。其中 the entirety of JS 选项代表模板中需要可以运行JS代码；just the basics 则代表模板中仅包含基本的逻辑，比如判断这类的；none at all 则表示模板中不包含任何逻辑，换而言之几乎只能做变量替换的操作。</p>

<p>第三项 Does it need to be one of the very fastest，表示你是否对速度有特别严苛的要求，yes or no。选完yes后会发现只剩三种doT.js、Microtemplating、Underscore templates，这是由一个应用来判定的：<a href="http://jsperf.com/javascript-templating-shootoff-extended">jsPerf</a>。这三种在测试中是排行前三的。但是我们发现里面评测的模板并不完全，所以其实这项并没有太大的参考价值。</p>

<p>第四项 Do you need to pre-compile templates，表示你是否需要可以预编译的模板。首先要解释一下编译的意思，对于一般编程语言，编译就是让代码转换并优化成机器可以识别的机器码，从而机器可以直接运行。这里的编译意思类似，一个模板只是一个直观的数据字符串，我们需要让他变得可执行，那么我们就要让他转变成一个可以执行的函数对象，虽然这个对象一般也是以字符串的形式存在的。是否可以预编译的差别在于，如果你的模板是固定不变的，那么如果预先编译好并将编译结果保存起来，要使用的时候就不需要再动态编译，可以减少你分析模板的时间。</p>

<p>第五项 Do you need compile-time partials，表示你是否需要在编译时的模板拆分。这里的拆分其实并不是准确的表达，但是我找不到一个更好的词来形容了。实际上这个概念很简单，就是模块化的思想，可以将多个模板中重复使用的部分拆分出来单独存成一个模板文件，而让其他需要使用这个部分的模板导入这个模板文件。这种操作一般只在服务端模板中进行，因为在前端难以动态读取后台的分布式拆分文件。但是对于可以预编译的模板，则可以预先将分布式的文件编译好，然后在前台一一导入后使用。</p>

<p>第六项 Do you want a DOM structure, or just a string，那是问你的模板是一个字符串还是一个DOM结构。关于这点我也不太清楚，因为在我的印象中模板就是一个字符串，而里面包含了所渲染的HTML字符串的直观表示。选了DOM之后，同样只剩下三种模板dom.js、pure.js、Transparency。我简单地查看了一下pure.js模板（他同时也是一个不包含逻辑的模板），发现他并不是将一个模板保存为字符串，而是直接在HTML文件中为标签添加一些特殊的类，然后渲染的时候再用选择器出这个DOM对象进行渲染，换而言之他的模板是直接内嵌在HTML文件中的！那么确实如果希望应用逻辑是不大可能的，因为必须保证模板符合XHTML规范。</p>

<p>第七项 Aside from template tags, should it be the same language before and after rendering，这项比较好理解，除了模板标签之外，模板的语法要和模板渲染后的语法一样，那么在这里我们要渲染出HTML语言，结果是显然易见的，就是模板是一种在HTML语言中内嵌标签的语言。或许你会觉得很奇怪，难道还有什么除了插入标签外的神奇的语法吗？选No之后又再一次出现了三种模板dom.js、Jade templates、Microtemplating。我再一次简单的看了下dom.js，因为他同时也是一个使用DOM结构的模板。结果发现DOM是一种完全使用Javascript的模板！他的语法还是非常直观的：</p>

<p>``` javascript
header(</p>

<pre><code>h1('Heading'),
h2('Subheading'));
</code></pre>

<p>nav(</p>

<pre><code>ul({ 'class': 'breadcrumbs' },
  li(a({ href: '/' }, 'Home')),
  li(a({ href: '/section/'}, 'Section')),
  li(a('Subject'))));
</code></pre>

<p>article(</p>

<pre><code>p('Lorem ipsum...'));
</code></pre>

<p>footer('Footer stuff');
```</p>

<p>明白了上面的含义的话，其实还是很好选择的。关于选项中的第二项可能有点争议，到底模板需要多少逻辑呢。如果从模板的出发点来看的话，其实答案是显然易见的。有些人可能觉得功能越强大的模板越好，但是事实恰好相反，人们发明了模板就是为了直观地设计输出数据的表现形式，让显示与逻辑数据分离。此时若为了让模板支持更强大的功能而硬是往里面添加复杂的逻辑，甚至让其支持javascript，是本末倒置的，这些明明可以直接在javascript中操作的东西又何必硬塞到模板里面让其可读性降低呢。然而不包含任何逻辑毕竟不现实，因此大多数模板都提供了最基本的逻辑能力，比如遇到空对象的特殊处理方法。所以这里一般选择just the basics。</p>

<p>最后剩下来的模板也只剩6个，但是到底要如何取舍，还是不能简单的决定。经过一些对比评测[1]，大家普遍认为以下三种是综合评分最高的：Mustache.js、Handlebars.js、dust.js。</p>

<p><a href="https://github.com/janl/mustache.js/">Mustache</a> 应该是最流行的模版了，显示与逻辑分离，模板语法清晰，但是逻辑功能太过缺乏，代码庞大而且效率比较低，已经停止维护超过两年。他的语法如下：
<code>html
{ {#stooges} }
&lt;b&gt;{ {name} }&lt;/b&gt;
{ {/stooges} }
</code></p>

<p><a href="https://github.com/wycats/handlebars.js/">Handlebars</a>
是Mustache的改进，显示与逻辑分离，语法兼容Mustache，可以编译成代码，改进Mustache对路径的支持，但是若需要在服务端运行需要使用服务端Javascript引擎如Node.js。
``` html
{ {#each comments} }</p>

<div class="body">{ {body} }</div>


<p>{ {/each} }
```</p>

<p><a href="https://github.com/linkedin/dustjs">Dust</a>
也是显示与逻辑分离，语法比Mustache更清晰简便（少写一对花括号{}!），可以编译成代码，比Mustache提供更好的路径支持，支持更多的扩展功能，异步渲染，执行效率更高。但是若需要在服务端运行需要使用服务端Javascript引擎如Node.js。
<code>html
{#names}
&lt;li&gt;{name}&lt;/li&gt;{~n}
{/names}
</code></p>

<p>以上三种都是最优秀的模板了，语法可以说是比较类似，但是无论从结果还是过程看Dust都有着无比强大的优势。目前Dust.js是由LinkedIn团队维护的，最近已更新到2.0版本，相比以前有更大的优化，所以我觉得选用dust.js作为模版是比较合适的。只可惜Dust.js毕竟没有胡子Mustache家族势力广泛，尤其在我大天朝，少有见到关于dust的技术文章。下次我打算尽我微薄之力，为大家介绍一下Dust的使用方法，普及一下dust这个LinkedIn推荐的模板。</p>

<p>参考：</p>

<p>[1] <a href="http://engineering.linkedin.com/frontend/client-side-templating-throwdown-mustache-handlebars-dustjs-and-more">The client-side templating throwdown: mustache, handlebars, dust.js, and more</a></p>
]]></content>
  </entry>
  
</feed>
